import wollok.game.*
import color.*
import bloque.*
import extras.*
import forma.*


describe "Test de la forma en general"{
	const forma = new Forma()
	
	fixture{
		forma.bloques([new Bloque(position = game.at(5,5)),	//Pieza Central
					   new Bloque(position = game.at(4,5)),
					   new Bloque(position = game.at(6,5))])
	}
	test "La posicion del bloque central es la posicion 5,5"{
		assert.equals(game.at(5,5),forma.bloqueCentral().position())
	}
	test "El color por default de la forma es azul"{
		assert.equals(azul,forma.color())
	}
	test "Al mover a la derecha el Tetromino todos los bloques se mueven hacia la derecha"{
		forma.moverDerecha()
		assert.equals(game.at(5,5).right(1),forma.bloques().get(0).position())
		assert.equals(game.at(4,5).right(1),forma.bloques().get(1).position())
		assert.equals(game.at(6,5).right(1),forma.bloques().get(2).position())
	}
	test "Al mover a la izquierda el Tetromino todos los bloques se mueven hacia la izquierda"{
		forma.moverIzquierda()
		assert.equals(game.at(5,5).left(1),forma.bloques().get(0).position())
		assert.equals(game.at(4,5).left(1),forma.bloques().get(1).position())
		assert.equals(game.at(6,5).left(1),forma.bloques().get(2).position())
	}
	test "Si el Tetromino NO esta pegado a una pared se sabe que no colisiona con la misma al querer moverse"{
		assert.notThat(forma.colisionaConPared(derecha))
	}
	test "Si el Tetromino esta pegado a una pared se sabe que si se mueve una vez mas hacia ese lado colisiona"{
		forma.moverDerecha()
		forma.moverDerecha()
		forma.moverDerecha()
		assert.that(forma.colisionaConPared(derecha))
	}
	test "Si el Tetromino esta pegado al piso e intenta moverse abajo nuevamente la pieza se estanca"{
		forma.bajar() //Posicion y=4
		forma.bajar() //Posicion y=3
		forma.bajar() //Posicion y=2
		forma.bajar() //Posicion y=1
		forma.bajar() //Posicion y=0
		forma.bajar() //Aca se estanca en posicion y=0
		assert.that(forma.estaEstancado())
	}
}
